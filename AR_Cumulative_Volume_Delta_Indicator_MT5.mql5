//+------------------------------------------------------------------+
//|                                    AR_Cumulative_Delta_Index.mq5 |
//|                                  Copyright 2022, MetaQuotes Ltd. |
//|                                             https://www.mql5.com |
//+------------------------------------------------------------------+
#include <MovingAverages.mqh>
#property copyright "Copyright 2022, MetaQuotes Ltd."
#property link      "https://www.mql5.com"
#property version   "1.00"

#property indicator_separate_window

#property indicator_buffers 13
#property indicator_plots 1

#property indicator_type1   DRAW_COLOR_HISTOGRAM
#property indicator_label1  "Cumulative Delta Volume"
#property indicator_color1  Green,Red
#property indicator_width1  2
#property indicator_level1  0.0
#property indicator_levelstyle STYLE_SOLID
#property indicator_levelcolor DimGray

input int CDIPeriod = 10; // Period
input int CDIRange = 200; // Range

double cumulative_volume_delta_Buffer[];
double upper_wick_Buffer[];
double lower_wick_Buffer[];
double spread_Buffer[];
double body_length_Buffer[];
double percent_upper_wick_Buffer[];
double percent_lower_wick_Buffer[];
double percent_body_length_Buffer[];
double buying_volume_Buffer[];
double selling_volume_Buffer[];
double cumulative_buying_volume_Buffer[];
double cumulative_selling_volume_Buffer[];
double HistogramColorBuffer[];


//+------------------------------------------------------------------+
//| Custom indicator initialization function                         |
//+------------------------------------------------------------------+
int OnInit()
  {
//--- indicator buffers mapping
   SetIndexBuffer(0,cumulative_volume_delta_Buffer,INDICATOR_DATA);
   SetIndexBuffer(1,upper_wick_Buffer,INDICATOR_CALCULATIONS);
   SetIndexBuffer(2,lower_wick_Buffer,INDICATOR_CALCULATIONS);
   SetIndexBuffer(3,spread_Buffer,INDICATOR_CALCULATIONS);
   SetIndexBuffer(4,body_length_Buffer,INDICATOR_CALCULATIONS);
   SetIndexBuffer(5,percent_upper_wick_Buffer,INDICATOR_CALCULATIONS);
   SetIndexBuffer(6,percent_lower_wick_Buffer,INDICATOR_CALCULATIONS);
   SetIndexBuffer(7,percent_body_length_Buffer,INDICATOR_CALCULATIONS);
   SetIndexBuffer(8,buying_volume_Buffer,INDICATOR_CALCULATIONS);
   SetIndexBuffer(9,selling_volume_Buffer,INDICATOR_CALCULATIONS);
   SetIndexBuffer(10,cumulative_buying_volume_Buffer,INDICATOR_CALCULATIONS);
   SetIndexBuffer(11,cumulative_selling_volume_Buffer,INDICATOR_CALCULATIONS);
   SetIndexBuffer(12,HistogramColorBuffer,INDICATOR_COLOR_INDEX);


   PlotIndexSetInteger(0,PLOT_COLOR_INDEXES,2);
   PlotIndexSetInteger(0,PLOT_DRAW_BEGIN,CDIPeriod-1);


   string shortname;
   StringConcatenate(shortname,"CDI ( ",CDIPeriod," )");
//--- set a label do display in DataWindow
   PlotIndexSetString(0,PLOT_LABEL,shortname);
//--- set a name to show in a separate sub-window or a pop-up help
   IndicatorSetString(INDICATOR_SHORTNAME,shortname);
//--- set accuracy of displaying the indicator values
   IndicatorSetInteger(INDICATOR_DIGITS,2);


//---
   return(INIT_SUCCEEDED);
  }
//+------------------------------------------------------------------+
//| Custom indicator iteration function                              |
//+------------------------------------------------------------------+
int OnCalculate(const int rates_total,
                const int prev_calculated,
                const datetime &time[],
                const double &open[],
                const double &high[],
                const double &low[],
                const double &close[],
                const long &tick_volume[],
                const long &volume[],
                const int &spread[])
  {
//---
   if(rates_total<CDIPeriod)
     {
      Print("Not enough rates...");
      return(0);
     }


//--- set limit for which bars need to be (re)calculated
   int limit;
   int range;

   if(prev_calculated==0 || prev_calculated<0 || prev_calculated>rates_total)
      limit=rates_total-1;
   else
      limit=rates_total-prev_calculated;

   if(limit < CDIRange)
     {
      range = 0;
     }
   else
     {
      range = CDIRange;
     }

   for(int i=limit; i>=limit-range; i--)
     {
      //upper_wick_Buffer
      if(close[i]>open[i])
        {
         upper_wick_Buffer[i] = high[i]-close[i];
        }
      else
        {
         upper_wick_Buffer[i] = high[i]-open[i];
        }

      //lower_wick_Buffer
      if(close[i]>open[i])
        {
         lower_wick_Buffer[i] = open[i]-low[i];
        }
      else
        {
         lower_wick_Buffer[i] = close[i]-low[i];
        }

      // spread_Buffer
      spread_Buffer[i] = high[i] - low[i];

      // body_length_Buffer
      body_length_Buffer[i] = spread_Buffer[i] - (upper_wick_Buffer[i] + lower_wick_Buffer[i]);

      //percent_upper_wick
      percent_upper_wick_Buffer[i] = upper_wick_Buffer[i]/spread_Buffer[i];

      //percent_lower_wick = lower_wick/spread
      percent_lower_wick_Buffer[i] = lower_wick_Buffer[i]/spread_Buffer[i];

      //percent_body_length = body_length/spread
      percent_body_length_Buffer[i] = body_length_Buffer[i]/spread_Buffer[i];


      //buying_volume
      if(close[i]>open[i])
        {
         buying_volume_Buffer[i] = NormalizeDouble((percent_body_length_Buffer[i] + (percent_upper_wick_Buffer[i] + percent_lower_wick_Buffer[i])/2)*tick_volume[i],2);
        }
      else
        {
         buying_volume_Buffer[i] = NormalizeDouble(((percent_upper_wick_Buffer[i] + percent_lower_wick_Buffer[i])/2)*tick_volume[i],2);
        }

      //selling_volume
      if(close[i]<open[i])
        {
         selling_volume_Buffer[i] = NormalizeDouble((percent_body_length_Buffer[i] + (percent_upper_wick_Buffer[i] + percent_lower_wick_Buffer[i])/2)*tick_volume[i],2);
        }
      else
        {
         selling_volume_Buffer[i] = NormalizeDouble(((percent_upper_wick_Buffer[i] + percent_lower_wick_Buffer[i])/2) * tick_volume[i],2);
        }
     }

//cumulative_buying_volume
   ExponentialMAOnBuffer(rates_total,prev_calculated,0,CDIPeriod,buying_volume_Buffer,cumulative_buying_volume_Buffer);

//cumulative_selling_volume
   ExponentialMAOnBuffer(rates_total,prev_calculated,0,CDIPeriod,selling_volume_Buffer,cumulative_selling_volume_Buffer);

   for(int i=limit; i>=limit-range; i--)
     {

      cumulative_volume_delta_Buffer[i] = NormalizeDouble(cumulative_buying_volume_Buffer[i] - cumulative_selling_volume_Buffer[i],2);

      if(cumulative_buying_volume_Buffer[i] > cumulative_selling_volume_Buffer[i])
         HistogramColorBuffer[i]=0;
      else
         HistogramColorBuffer[i]=1;

     }

   return(rates_total);
  }
//+------------------------------------------------------------------+
//+------------------------------------------------------------------+
//+------------------------------------------------------------------+
