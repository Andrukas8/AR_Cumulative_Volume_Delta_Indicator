//+------------------------------------------------------------------+
//|                                    AR_Cumulative_Delta_Index.mq5 |
//|                                  Copyright 2022, MetaQuotes Ltd. |
//|                                             https://www.mql5.com |
//+------------------------------------------------------------------+
#include <MovingAverages.mqh>
#property copyright "Copyright 2022, MetaQuotes Ltd."
#property link      "https://www.mql5.com"
#property version   "1.00"

#property indicator_separate_window

#property indicator_buffers 14
#property indicator_plots 1

#property indicator_type1   DRAW_COLOR_HISTOGRAM
#property indicator_label1  "Cumulative Delta Volume"
#property indicator_color1  clrDarkGreen,clrTomato
#property indicator_width1  4
#property indicator_level1  0.0
#property indicator_levelstyle STYLE_SOLID
#property indicator_levelcolor DimGray

input int CDIPeriod = 10; // Period
input int CDIRange = 100; // Range

double cumulative_volume_delta_Buffer[];
double upper_wick_Buffer[];
double lower_wick_Buffer[];
double spread_Buffer[];
double body_length_Buffer[];
double percent_upper_wick_Buffer[];
double percent_lower_wick_Buffer[];
double percent_body_length_Buffer[];
double buying_volume_Buffer[];
double selling_volume_Buffer[];
double cumulative_buying_volume_Buffer[];
double cumulative_selling_volume_Buffer[];
double HistogramColorBuffer[];

//--- An array to store colors
color colors[]= {clrDarkGreen,clrTomato};

string text;

//+------------------------------------------------------------------+
//| Custom indicator initialization function                         |
//+------------------------------------------------------------------+
int OnInit()
  {
   text = "";
//--- indicator buffers mapping
   SetIndexBuffer(0,cumulative_volume_delta_Buffer,INDICATOR_DATA);
   SetIndexBuffer(1,upper_wick_Buffer,INDICATOR_CALCULATIONS);
   SetIndexBuffer(2,lower_wick_Buffer,INDICATOR_CALCULATIONS);
   SetIndexBuffer(3,spread_Buffer,INDICATOR_CALCULATIONS);
   SetIndexBuffer(4,body_length_Buffer,INDICATOR_CALCULATIONS);
   SetIndexBuffer(5,percent_upper_wick_Buffer,INDICATOR_CALCULATIONS);
   SetIndexBuffer(6,percent_lower_wick_Buffer,INDICATOR_CALCULATIONS);
   SetIndexBuffer(7,percent_body_length_Buffer,INDICATOR_CALCULATIONS);
   SetIndexBuffer(8,buying_volume_Buffer,INDICATOR_CALCULATIONS);
   SetIndexBuffer(9,selling_volume_Buffer,INDICATOR_CALCULATIONS);
   SetIndexBuffer(10,cumulative_buying_volume_Buffer,INDICATOR_CALCULATIONS);
   SetIndexBuffer(11,cumulative_selling_volume_Buffer,INDICATOR_CALCULATIONS);
   SetIndexBuffer(12,HistogramColorBuffer,INDICATOR_COLOR_INDEX);


   ArraySetAsSeries(cumulative_volume_delta_Buffer,false);
   ArraySetAsSeries(upper_wick_Buffer,false);
   ArraySetAsSeries(lower_wick_Buffer,false);
   ArraySetAsSeries(spread_Buffer,false);
   ArraySetAsSeries(body_length_Buffer,false);
   ArraySetAsSeries(percent_upper_wick_Buffer,false);
   ArraySetAsSeries(percent_lower_wick_Buffer,false);
   ArraySetAsSeries(percent_body_length_Buffer,false);
   ArraySetAsSeries(buying_volume_Buffer,false);
   ArraySetAsSeries(selling_volume_Buffer,false);
   ArraySetAsSeries(cumulative_buying_volume_Buffer,false);
   ArraySetAsSeries(cumulative_selling_volume_Buffer,false);
   ArraySetAsSeries(HistogramColorBuffer,false);


   PlotIndexSetInteger(0,PLOT_COLOR_INDEXES,2);
   PlotIndexSetInteger(0,PLOT_DRAW_BEGIN,CDIPeriod-1);

   string shortname;
   StringConcatenate(shortname,"CDI ( ",CDIPeriod," )");
//--- set a label do display in DataWindow
   PlotIndexSetString(0,PLOT_LABEL,shortname);
//--- set a name to show in a separate sub-window or a pop-up help
   IndicatorSetString(INDICATOR_SHORTNAME,shortname);
//--- set accuracy of displaying the indicator values
   IndicatorSetInteger(INDICATOR_DIGITS,2);


//---
   return(INIT_SUCCEEDED);
  }
//+------------------------------------------------------------------+
//| Custom indicator iteration function                              |
//+------------------------------------------------------------------+
int OnCalculate(const int rates_total,
                const int prev_calculated,
                const datetime &time[],
                const double &open[],
                const double &high[],
                const double &low[],
                const double &close[],
                const long &tick_volume[],
                const long &volume[],
                const int &spread[])
  {
//---
// text = "";

   if(rates_total<CDIPeriod)
     {
      Print("Not enough rates...");
      return(0);
     }

//--- set limit for which bars need to be (re)calculated
   int limit;

   if(prev_calculated==0 || prev_calculated<0 || prev_calculated>rates_total)
      limit=rates_total-1;
   else
      limit=rates_total-prev_calculated;

   int range;

   if(limit < CDIRange)
      range = 0;
   else
      range = CDIRange;



   for(int i=limit; i>=limit-range; i--)

      //for(int i=1; i<rates_total-CDIRange && !IsStopped(); i++)
     {
      //upper_wick_Buffer
      if(close[i]>open[i])
         upper_wick_Buffer[i] = NormalizeDouble(high[i]-close[i],_Digits);
      else
         upper_wick_Buffer[i] = NormalizeDouble(high[i]-open[i],_Digits);

      //lower_wick_Buffer
      if(close[i]>open[i])
         lower_wick_Buffer[i] = NormalizeDouble(open[i]-low[i],_Digits);
      else
         lower_wick_Buffer[i] = NormalizeDouble(close[i]-low[i],_Digits);

      // spread_Buffer
      spread_Buffer[i] = NormalizeDouble(high[i] - low[i],_Digits);

      // body_length_Buffer
      body_length_Buffer[i] = NormalizeDouble(spread_Buffer[i] - (upper_wick_Buffer[i] + lower_wick_Buffer[i]),5);

      //percent_upper_wick
      percent_upper_wick_Buffer[i] = NormalizeDouble(upper_wick_Buffer[i]/spread_Buffer[i],5);

      //percent_lower_wick = lower_wick/spread
      percent_lower_wick_Buffer[i] = NormalizeDouble(lower_wick_Buffer[i]/spread_Buffer[i],5);

      //percent_body_length = body_length/spread
      percent_body_length_Buffer[i] = NormalizeDouble(body_length_Buffer[i]/spread_Buffer[i],5);

      //buying_volume
      if(close[i]>open[i])
         buying_volume_Buffer[i] = NormalizeDouble((percent_body_length_Buffer[i] + (percent_upper_wick_Buffer[i] + percent_lower_wick_Buffer[i])/2)*tick_volume[i],5);
      else
         buying_volume_Buffer[i] = NormalizeDouble(((percent_upper_wick_Buffer[i] + percent_lower_wick_Buffer[i])/2)*tick_volume[i],5);

      //selling_volume
      if(close[i]<open[i])
         selling_volume_Buffer[i] = NormalizeDouble((percent_body_length_Buffer[i] + (percent_upper_wick_Buffer[i] + percent_lower_wick_Buffer[i])/2)*tick_volume[i],5);
      else
         selling_volume_Buffer[i] = NormalizeDouble(((percent_upper_wick_Buffer[i] + percent_lower_wick_Buffer[i])/2) * tick_volume[i],5);

     }


//cumulative_buying_volume   //cumulative_selling_volume
   ExponentialMAOnBuffer(rates_total,prev_calculated,0,CDIPeriod,buying_volume_Buffer,cumulative_buying_volume_Buffer);
   ExponentialMAOnBuffer(rates_total,prev_calculated,0,CDIPeriod,selling_volume_Buffer,cumulative_selling_volume_Buffer);


   for(int i=limit; i>=limit-range; i--)
      //   for(int i=1; i<rates_total-CDIRange && !IsStopped(); i++)
     {

      //cumulative_volume_delta_Buffer
      cumulative_volume_delta_Buffer[i] = NormalizeDouble(cumulative_buying_volume_Buffer[i] - cumulative_selling_volume_Buffer[i],5);

      // Histogram Coloring
      if(cumulative_buying_volume_Buffer[i] < cumulative_selling_volume_Buffer[i])
        {
         HistogramColorBuffer[i]=0;
         //Print(HistogramColorBuffer[i]);
        }

      else
        {
         HistogramColorBuffer[i]=1;
         //Print(HistogramColorBuffer[i]);
        }

      /*
            text += "upper_wick_Buffer " +  upper_wick_Buffer[i] + "\n";
            text += "lower_wick_Buffer " +  lower_wick_Buffer[i] + "\n";
            text += "spread_Buffer " +  spread_Buffer[i] + "\n";
            text += "body_length_Buffer " +  body_length_Buffer[i] + "\n";
            text += "percent_upper_wick_Buffer " +  percent_upper_wick_Buffer[i] + "\n";
            text += "percent_lower_wick_Buffer " +  percent_lower_wick_Buffer[i] + "\n";
            text += "percent_body_length_Buffer " +  percent_body_length_Buffer[i] + "\n";
            text += "buying_volume_Buffer " +  buying_volume_Buffer[i] + "\n";
            text += "selling_volume_Buffer " +  selling_volume_Buffer[i] + "\n";
            text += "cumulative_volume_delta_Buffer " +  cumulative_volume_delta_Buffer[i] + "\n";
      */
     }
// Comment(text);
   return(rates_total);
  }
//+------------------------------------------------------------------+
//+------------------------------------------------------------------+
//+------------------------------------------------------------------+
