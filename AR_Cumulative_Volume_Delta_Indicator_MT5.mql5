//+------------------------------------------------------------------+
//|                                    AR_Cumulative_Delta_Index.mq5 |
//|                                  Copyright 2022, MetaQuotes Ltd. |
//|                                             https://www.mql5.com |
//+------------------------------------------------------------------+
#property copyright "Copyright 2022, MetaQuotes Ltd."
#property link      "https://www.mql5.com"
#property version   "1.00"

#property indicator_separate_window

#property indicator_buffers 10
#property indicator_plots 1

#property indicator_type1 DRAW_HISTOGRAM
#property indicator_color1 clrRed, clrGreen
#property indicator_style1 STYLE_SOLID
#property indicator_width1 2
#property indicator_label1  "Cumulative Delta Volume"

input uint                CDIPeriod = 14;             // период индикатора
input ENUM_APPLIED_VOLUME VolumeType=VOLUME_TICK;   // объём
input int                 Shift=0;                 // Сдвиг индикатора по горизонтали в барах

double upper_wick_Buffer[];
double lower_wick_Buffer[];
double spread_Buffer[];
double body_length_Buffer[];
double percent_upper_wick_Buffer[];
double percent_lower_wick_Buffer[];
double percent_body_length_Buffer[];
double buying_volume_Buffer[];
double selling_volume_Buffer[];
double cumulative_buying_volume_Buffer[];
double cumulative_selling_volume_Buffer[];
double cumulative_volume_delta_Buffer[];


//+------------------------------------------------------------------+
//| Custom indicator initialization function                         |
//+------------------------------------------------------------------+
int OnInit()
  {
//--- indicator buffers mapping
   SetIndexBuffer(0,cumulative_volume_delta_Buffer,INDICATOR_DATA);
   SetIndexBuffer(1,upper_wick_Buffer,INDICATOR_CALCULATIONS);
   SetIndexBuffer(2,lower_wick_Buffer,INDICATOR_CALCULATIONS);
   SetIndexBuffer(3,spread_Buffer,INDICATOR_CALCULATIONS);
   SetIndexBuffer(4,body_length_Buffer,INDICATOR_CALCULATIONS);
   SetIndexBuffer(5,percent_body_length_Buffer,INDICATOR_CALCULATIONS);
   SetIndexBuffer(6,buying_volume_Buffer,INDICATOR_CALCULATIONS);
   SetIndexBuffer(7,selling_volume_Buffer,INDICATOR_CALCULATIONS);
   SetIndexBuffer(8,cumulative_buying_volume_Buffer,INDICATOR_CALCULATIONS);
   SetIndexBuffer(9,cumulative_selling_volume_Buffer,INDICATOR_CALCULATIONS);

//---
   return(INIT_SUCCEEDED);
  }
//+------------------------------------------------------------------+
//| Custom indicator iteration function                              |
//+------------------------------------------------------------------+
int OnCalculate(const int rates_total,
                const int prev_calculated,
                const datetime &time[],
                const double &open[],
                const double &high[],
                const double &low[],
                const double &close[],
                const long &tick_volume[],
                const long &volume[],
                const int &spread[])
  {
//---
   int start;

   if(prev_calculated==0)
      start=1;  // start filling out from the 1st index
   else
      start=prev_calculated-1;    // set start equal to the last index in the arrays



   for(int i=start; i<rates_total; i++)
     {

      //upper_wick_Buffer
      if(close[i]>open[i])
        {
         upper_wick_Buffer[i] = high[i]-close[i];
        }
      else
        {
         upper_wick_Buffer[i] = high[i]-open[i];
        }

      //lower_wick_Buffer
      if(close[i]>open[i])
        {
         lower_wick_Buffer[i] = open[i]-low[i];
        }
      else
        {
         lower_wick_Buffer[i] = close[i]-low[i];
        }

      // spread_Buffer
      spread_Buffer[i] = high[i] - low[i];

      // body_length_Buffer
      body_length_Buffer[i] = spread_Buffer[i] - (upper_wick_Buffer[i] + lower_wick_Buffer[i]);
     }




   return(rates_total);
  }
//+------------------------------------------------------------------+


/*
study("Cumulative Volume Delta")

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

//upper_wick = close>open ? high-close : high-open
//lower_wick = close>open ? open-low : close-low
//spread = high-low
//body_length = spread - (upper_wick + lower_wick)

percent_upper_wick = upper_wick/spread
percent_lower_wick = lower_wick/spread
percent_body_length = body_length/spread
buying_volume = close>open ? (percent_body_length + (percent_upper_wick + percent_lower_wick)/2)*volume : ((percent_upper_wick + percent_lower_wick)/2) * volume
selling_volume = close<open ? (percent_body_length + (percent_upper_wick + percent_lower_wick)/2)*volume : ((percent_upper_wick + percent_lower_wick)/2) * volume

cumulation_length = input(14)

cumulative_buying_volume = ema(buying_volume,cumulation_length)
cumulative_selling_volume = ema(selling_volume,cumulation_length)

cumulative_volume_delta = cumulative_buying_volume - cumulative_selling_volume

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

fill_color = cumulative_buying_volume > cumulative_selling_volume ? color.green : cumulative_buying_volume < cumulative_selling_volume ? color.red : color.yellow

pb = plot(cumulative_buying_volume, color=color.green , transp=70)
ps = plot(cumulative_selling_volume, color=color.red , transp=70)

fill(pb, ps, color = fill_color)

volume_strength_wave = cumulative_buying_volume > cumulative_selling_volume ? cumulative_buying_volume : cumulative_selling_volume
ema_volume_strength_wave = ema(volume_strength_wave , cumulation_length)
plot(ema_volume_strength_wave, color=color.gray, transp=80)

cumulative_volume_delta = cumulative_buying_volume - cumulative_selling_volume
plot(cumulative_volume_delta, color= cumulative_volume_delta>0 ? color.green : color.red, style=plot.style_columns, transp=61)
*/
//+------------------------------------------------------------------+
